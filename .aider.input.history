
# 2024-06-11 00:20:03.619755
+Writing about tech can be just as important as making it. Developers spend plenty of time creating new applications and debugging existing codebases, but most developers also spend at least some of their time reading and writing about technical concepts, recent advancements, and new technologies. A simple Google search for any concept covered in this course returns thousands of think pieces and tutorials from developers of all skill levels!
+
+Model-View-Controller (MVC) Challenge: Tech Blog
+Your task this week is to build a CMS-style blog site similar to a Wordpress site, where developers can publish their blog posts and comment on other developers’ posts as well. You’ll build this site completely from scratch and deploy it to Render. Your app will follow the MVC paradigm in its architectural structure, using Handlebars.js as the templating language, Sequelize as the ORM, and the express-session npm package for authentication.
+
+User Story
+AS A developer who writes about tech
+I WANT a CMS-style blog site
+SO THAT I can publish articles, blog posts, and my thoughts and opinions
+Acceptance Criteria
+GIVEN a CMS-style blog site
+WHEN I visit the site for the first time
+THEN I am presented with the homepage, which includes existing blog posts if any have been posted; navigation links for the homepage and the dashboard; and the option to log in
+WHEN I click on the homepage option
+THEN I am taken to the homepage
+WHEN I click on any other links in the navigation
+THEN I am prompted to either sign up or sign in
+WHEN I choose to sign up
+THEN I am prompted to create a username and password
+WHEN I click on the sign-up button
+THEN my user credentials are saved and I am logged into the site
+WHEN I revisit the site at a later time and choose to sign in
+THEN I am prompted to enter my username and password
+WHEN I am signed in to the site
+THEN I see navigation links for the homepage, the dashboard, and the option to log out
+WHEN I click on the homepage option in the navigation
+THEN I am taken to the homepage and presented with existing blog posts that include the post title and the date created
+WHEN I click on an existing blog post
+THEN I am presented with the post title, contents, post creator’s username, and date created for that post and have the option to leave a comment
+WHEN I enter a comment and click on the submit button while signed in
+THEN the comment is saved and the post is updated to display the comment, the comment creator’s username, and the date created
+WHEN I click on the dashboard option in the navigation
+THEN I am taken to the dashboard and presented with any blog posts I have already created and the option to add a new blog post
+WHEN I click on the button to add a new blog post
+THEN I am prompted to enter both a title and contents for my blog post
+WHEN I click on the button to create a new blog post
+THEN the title and contents of my post are saved and I am taken back to an updated dashboard with my new blog post
+WHEN I click on one of my existing posts in the dashboard
+THEN I am able to delete or update my post and taken back to an updated dashboard
+WHEN I click on the logout option in the navigation
+THEN I am signed out of the site
+WHEN I am idle on the site for more than a set time
+THEN I am able to view posts and comments but I am prompted to log in again before I can add, update, or delete posts
+Mock-Up
+The following animation demonstrates the application functionality:
+
+Animation cycles through signing into the app, clicking on buttons, and updating blog posts.
+Getting Started
+Your application’s folder structure must follow the Model-View-Controller paradigm. You’ll need to use the express-handlebarsLinks to an external site. package to implement Handlebars.js for your Views, use the pgLinks to an external site. and SequelizeLinks to an external site. packages to connect to a PostgreSQL database for your Models, and create an Express.js API for your Controllers.
+
+You’ll also need the dotenv packageLinks to an external site. to use environment variables, the bcrypt packageLinks to an external site. to hash passwords, and the express-sessionLinks to an external site. and connect-session-sequelizeLinks to an external site. packages to add authentication.
+
+note The express-sessionLinks to an external site. package stores the session data on the client in a cookie. When you are idle on the site for more than a set time, the cookie will expire and you will be required to log in again to start a new session. This is the default behavior and you do not have to do anything to your application other than implement the npm package.

# 2024-06-11 00:21:32.721682
+/add models/index.js

# 2024-06-11 00:22:49.088207
+the files are creaated, proceed

# 2024-06-11 00:31:36.108683
+i have added the files, you can now continue

# 2024-06-11 00:32:53.503055
+continue with the rest of the code

# 2024-06-11 00:34:15.365132
+I added the file

# 2024-06-11 00:34:35.844058
+it is empty so far

# 2024-06-11 00:35:23.375957
+now lets write the code for the controllers

# 2024-06-11 00:36:36.299951
+continue with the code for the api files

# 2024-06-11 00:38:17.537789
+add the code for /js/post.js and /js/comment.js

# 2024-06-11 00:38:57.878898
+is there anything missing in my code?

# 2024-06-11 00:39:40.536826
+did we need the controller/api/ files?

# 2024-06-11 00:40:10.155026
+i already deleted them.

# 2024-06-11 01:02:24.153859
+write the code for auth.js and helpers.js

# 2024-06-11 01:03:13.387030
+how do i add a package.son?

# 2024-06-11 01:08:38.822944
+does this code have everything needed to run on render?

# 2024-06-11 01:10:06.582789
+use npm install and npm start

# 2024-06-11 01:13:34.431583
+when i try to run this code i get stuck in a loop on render: > cms-style-blog@1.0.0 install
+> npm install
+> cms-style-blog@1.0.0 install
+> npm install
+> cms-style-blog@1.0.0 install
+> npm install

# 2024-06-11 01:14:04.073945
+commit and push

# 2024-06-11 01:16:43.506569
+update the gitignore file 

# 2024-06-11 01:18:41.312261
+save and commit
